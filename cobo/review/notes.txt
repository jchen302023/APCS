Activity 1 -- Introduction (Reviews and Sentiment value)

1a. Record the method signature in the space below
public static double sentimentVal( String word )
1b. Does this method require a parameter? If so, what type of parameter is required? What happens if you pass a different type of parameter instead?
This method requires a String parameter. When we try to pass a int in as a parameter, there is an error message when we try to compile:
Review.java:167: error: incompatible types: int cannot be converted to String
    sentimentVal(3);
                 ^
1c Does the Method return a value? If so, what is the return type?
It returns a double.

2.
Method Call       Return value
absence           -0.8
christopher       0.35
salmon            -0.1

3. Determine whether or not each statement would compile.
a. double num = sentimentVal("warm");
  yes because the parameter and return values correspond with this declaration.
b. String word = sentimentVal(0.5);
  No because the return value is a double but word is a string and the parameter should be a String but the input is a double.
c. double x = sentimentval("good", "bad");
  No because sentimentVal does not take two parameters


  Activity 2 -- Sentimental Value and Star Ratings

  4. Explain how the totalSentiment method works
  totalSentiment() designates a new word when a space appears at the end. As we go through every character in the String, we look for spaces to splice out words to find the sentimentalValue of them. Then we will total these values.

  5a. Do the ratings make sense?
  Yes, they do. The more negative the review, the lower the star rating. 3 would correspond to a neutral star rating that is around 0.
  Anything above 0 would be more positive, which corresponds to higher star ratings of 4-5.

  5b. Describe two ways you can revamp your totalSentiments method
  We can write a method to see the frequency of certain words in the ratings with certain connotations (pos, neg, neu). We could have also
  used the average of all the sentiment values.

  6. Explain the logical errors he made and how he can fix it
  The student assigned his variable the same name as his method. To avoid complications, he should name it something else.

  Activity 3 -- Autogenerated Review

  3. Describe the action of the indexOf and substring methods. Explain how these methods can be used to divide an existing string into two parts. Why is it necessary to add 1 to the position of the space when copying the remainder of the string?
     indexOf can return the index of the first occurence of the character or word you are searching for, which can be used with substring and
     the index of the end of the word such that substring method can identify the location and return the target word. It is necessary to add one
     to the position of the space when copying the remainder of the string because the upper end of the substring method is exclusive, which means
     we need to include the index of the space to get the whole target word.

  5. Describe the difference between calling static and non-static methods.
    Non-static methods can call both static and non-static methods. However, static methods can only call
    other static methods.

  6. Describe how fakeReview can be modified to make a positive or negative review.
    Instead of using randomAdjective, we would specify if we wanted to use randomPositiveAdj or randomNegativeAdj.

    Activity 4 == Create positive or negative reviews

    1. People would want to boost another person's ego! :)
    2. People would want to generate bad reviews to trash on other people.
    3. A strong review should not have slang or curse words in it. It should also specify if it is a neutral review or a positive/negative review.
    There could be another parameter, such as pos, neg, and neu depending on the type of review the user wants to generate. If the user inputs pos,
    and if the word from the string is between a "*" and a " ", replace the word with a random positive adj. If the user inputs neg, and the word
    from the string is between a "*" and " ", replace it with a random negative adj. Else, replace that word with a random adj. If the word does not have
    a "*" in front of it, add it to the string total. Once the method iterates through the entire string, it would return the string total which
    has the generated review.

    5. What does wordOne = wordOne.subString(1) do?
    It returns all the characters following index 1
    6. Why was it neccesary to remove the *?
    The word would not be found in the file since for example, the code would not see "*dog" to be the same as "dog" and no sentiment value would be returned
    7. In this activity you wrote a method that created a more positive or more negative review. How could this method be used or modified to create a super positive review.
    I can replace the adjectives in my fake review with two positive adjectives every time so its twice the amount of positivity.
